{
    "contents" : "### Locations of relevant files (Make sure this is correct before attempting to run this script)\nactivity_labels.txt      = 'UCI HAR Dataset/activity_labels.txt'\nfeatures.txt             = 'UCI HAR Dataset/features.txt'\n\nsubject_train.txt        = 'UCI HAR Dataset/train/subject_train.txt'\nX_train.txt              = 'UCI HAR Dataset/train/X_train.txt'\ny_train.txt              = 'UCI HAR Dataset/train/y_train.txt'\n\nsubject_test.txt         = 'UCI HAR Dataset/test/subject_test.txt'\nX_test.txt               = 'UCI HAR Dataset/test/X_test.txt'\ny_test.txt               = 'UCI HAR Dataset/test/y_test.txt'\n\n#--------------------------------------------------------------------------------------------------------------\n\n### Use Regular Expression to locate features that are either means (mean) or standard deviations (std)\nall_feat       = read.table(features.txt, header = F, sep = \" \", stringsAsFactors = F)\nfeat_pattern   = '-(mean|std)([A-Z]|\\\\x28)'       # \\\\x28 represents UTF-8 open parenthesis\nfeat_idx       = grep(pattern = feat_pattern, x = all_feat[,2])\nfeat           = all_feat[feat_idx,]\n\n\n### Load measure columns that match the features selected above\ncolClasses           = rep('NULL',nrow(all_feat))\ncolClasses[feat[,1]] = rep('numeric',nrow(feat))\nmeasures_train = read.table(X_train.txt, header = F, colClasses = colClasses)\nmeasures_test  = read.table(X_test.txt , header = F, colClasses = colClasses)\ncolnames(measures_train) = colnames(measures_test) = feat[,2]\n\n### Load activitie columns and convert numbers into readable strings via factoring\nact_lbl = read.table(activity_labels.txt, header = F, sep = \" \")\nactivities_train    = read.table(y_train.txt, header = F, col.names = 'ACTIVITY')\nactivities_train[1] = factor(activities_train[[1]], levels = act_lbl[,1], labels = act_lbl[,2])\nactivities_test     = read.table(y_test.txt , header = F, col.names = 'ACTIVITY')\nactivities_test[1]  = factor(activities_test[[1]] , levels = act_lbl[,1], labels = act_lbl[,2])\n\n### Load subject columns\nsubjects_train = read.table(subject_train.txt, header = F, col.names = 'SUBJECT')\nsubjects_test  = read.table(subject_test.txt , header = F, col.names = 'SUBJECT')\n\n#--------------------------------------------------------------------------------------------------------------\n\n### Merge columns, then merge training and test data sets\ntrain    = cbind(subjects_train,activities_train,measures_train)\ntest     = cbind(subjects_test ,activities_test ,measures_test )\ndata     = rbind(train,test)\n\n\n### Function to calculate the measures' averages of each group\ngetAverageMeasures  <- function(group) {\n     means = colMeans(group[,3:length(group)])\n     cbind(group[1,1:2],t(means))\n}\n\n\n### Split and group data by Activities and Subjects, calculate averages for each componen, then merge\ndata  = split(data,data[,1:2])\ndata  = lapply(data,getAverageMeasures)\ndata  = do.call('rbind',data)\n\n### Output the final result as a text file in the working directory\nwrite.table(data,file = 'tidy_data_set.txt', row.names = F)\n\n",
    "created" : 1413985010870.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "717003571",
    "id" : "A91814DF",
    "lastKnownWriteTime" : 1414006858,
    "path" : "~/GitHub/GettingAndCleaningData/run_analysis.R",
    "project_path" : "run_analysis.R",
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}